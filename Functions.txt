XP 이전에는 ReadEventLog를 이용해서 시스템 로그를 감시할 수 있었다.
다만, 기능이 제한적이고 원격지로부터 로그를 전달받기 위해서는 부가적인 기능들도 필요로 했는데
이런 불편함을 없애고자 Windows Vista(2005년 쯤) 이후부터 winevt, 즉 wevtapi를 사용해 이벤트 로그를 관리하기 시작했다.

wevtapi는 현재까지도 사용되고 있으며, 세부적이 필터 기능과 원격지로부터 로그를 전달받을 수 있는 고급 함수로 이루어져 있다.
특정 api 함수는 COM을 활용해야 하는 경우도 있는데 Windows Vista 이후부터는 이벤트 로그를 xml 데이터 형식으로 저장하기 때문에 대부분 COM을 같이 사용한다고 보면 된다.

다만, 그 내용에는 별다른 차이가 없어 구조를 간단히 만들고자 한다면 Legacy 데이터 형식을 읽어올 수도 있다.

COM과 관련된 내용은 기초 개념만을 MSDN으로 학습하고 관련 토픽은 읽어볼 엄두도 못냈기 때문에 
이번 프로젝트에서는 Legacy 데이터 형식을 가져오는 로그 모니터링 도구를 만들어볼 것이다.

우선 주요 함수들과 기초 개념에 대해 알아보자.

앞서 wevtapi는 COM을 필요로 하는 함수가 존재한다고 했다.
함수를 세세히 분석해볼 시간이 없거나 COM에 익숙한 사람들은 편의상 소스 코드 선두에 COM 객체를 사용하기 위한 초기화 구문을 추가해두는 것이 좋다.
만약, 스레드나 메모리, 포인터 등에 관한 지식이 부족한 사람이라면 관련 내용을 좀 더 학습한 이후 프로젝트를 실습해보는 것이 바람직하다.

또, 이벤트 로그라는 것이 무엇인지, 어떤 요소들로 구성되어 있는지 역시 잘 모른다면 관련 MSDN을 읽은 후 해당 소스 코드를 읽어보기 바란다.

시스템 로그를 확인하기 위해 가장 먼저 사용하는 함수는 언제나 EvtOpenLog이다.
원형은 다음과 같다.

{
	// 로그 자체의 속성을 가져오므로 실시간 분석에는 사용되지 않는다.
	// 로그 파일(메타데이터 포함)을 분석하는 기능이 필요할 때 사용한다.

	EVT_HANDLE EvtOpenLog(
			EVT_HANDLE Session,  // 원격 세션 핸들 (NULL이면 로컬)
			LPCWSTR Path,        // 채널 이름 또는 로그 파일 경로
			DWORD Flags          // 로그 유형 지정 (EVT_OPEN_LOG_FLAGS)
			);
}

- Session:	원격 세션 핸들(파일이나 소켓 등)을 전달한다. 로컬에서 실행할 경우 NULL을 사용한다.
- Path:		열고자 하는 이벤트 로그 채널 이름 또는 로그 파일의 전체 경로를 지정한다.
- Flags:	EVT_OPEN_LOG_FLAGS 열거형을 사용하여 로그 유형을 지정한다. 예를 들어, 채널 로그인지 파일 로그인지 설정할 수 있다.
- 반환값:	성공하면 이벤트 로그 핸들(EVT_HANDLE)을 반환하며, 실패하면 NULL을 반환한다. 오류가 발생하면 GetLastError()를 호출하여 원인을 확인할 수 있다.

세 번째 인수인 Flags에는 다음과 같은 값을 지정할 수 있다.

- #define EvtOpenChannelPath 0x1
- #define EvtOpenFilePath    0x2

EvtOpenChannelPath는 이벤트 로그 채널을 말한다.
이는 운영체제가 실시간으로 관리하는 로그를 말하며 "System", "Application", "Security"와 같은 이름을 가진다.

EvtOpenFilePath는 특정 이벤트 로그 파일을 말한다.
.evtx와 같은 xml 형식으로 저장된 파일을 직접 지정해서 과거 데이터를 분석하는 용도로 활용된다.

위 함수를 이용하여 로그 채널이나 파일의 핸들을 전달받았다면 리소스를 읽기 위한 함수를 호출해야 한다.
이벤트 로그를 읽을 때 사용하는 함수는 다음과 같다.

{
	EVT_HANDLE EvtQuery(
			EVT_HANDLE Session,  // 원격 세션 핸들 (NULL이면 로컬)
			LPCWSTR Path,        // 채널 이름 또는 로그 파일 경로
			LPCWSTR Query,       // XPath 또는 XML 기반 쿼리 (NULL이면 모든 이벤트)
			DWORD Flags          // 쿼리 옵션 (EVT_QUERY_FLAGS)
			);
}

- Session:	원격 세션 핸들이며 로컬에서 실행할 경우 NULL을 사용한다.
- Path:		이벤트 로그 채널 이름이나 .evtx 파일 경로를 지정한다. "System" 같은 채널을 넣으면 해당 로그를 검색할 수 있다.
- Query:	XPath 또는 XML 기반 쿼리를 사용해서 특정 이벤트를 필터링할 수 있다. 모든 이벤트를 가져오려면 NULL 또는 "*"을 사용한다.
- Flags:	EVT_QUERY_FLAGS 열거형을 사용해서 쿼리 방식(순서, 실시간 여부 등)을 지정할 수 있다.

Flags는 다음과 같은 값을 가질 수 있다.
- #define EtQueryChannelPath (0x1):				이벤트 로그 채널에서 데이터를 가져온다. "System", "Application" 같은 채널을 지정하면 해당 로그를 검색할 수 있다.
- #define EvtQueryFilePath (0x2):				.evtx 파일에서 데이터를 가져온다. 특정 로그 파일을 분석할 때 사용한다.
- #define EvtQueryForwardDirection (0x100):		이벤트를 오래된 순서부터 최신 순서로 정렬해서 가져온다. 기본값으로 지정된다.
- #define EvtQueryReverseDirection (0x200):		이벤트를 최신 순서부터 오래된 순서로 정렬해서 가져온다.
- #define EvtQueryTolerateQueryErrors (0x1000): 일부 쿼리 오류가 있어도 실행하도록 설정한다. XPath 쿼리에서 오류가 발생해도 가능한 부분만 실행할 수 있다.

EvtQuery 함수는 특정 로그 채널에서 이벤트 목록을 가져오는 역할만을 한다.
즉, 원하는 채널을 대상으로 필터링된 이벤트의 집합을 얻어오는 것이다.


실제 이벤트를 단위별로 하나씩 읽고자 한다면 EvtNext 함수를 호출해야 한다.
원형은 다음과 같다.

{
	BOOL EvtNext(
		EVT_HANDLE ResultSet,  // EvtQuery()가 반환한 핸들
		DWORD EventsSize,      // 가져올 이벤트 개수
		PEVT_HANDLE Events,    // 이벤트 핸들을 저장할 포인터
		DWORD Timeout,         // 대기 시간 (밀리초)
		DWORD Flags,           // 예약된 값 (0으로 설정)
		PDWORD Returned        // 실제로 가져온 이벤트 개수
	);
}

- ResultSet:	EvtQuery()가 반환한 핸들을 전달한다. 쿼리된 이벤트 집합을 가리킨다.
- EventsSize:	한 번에 가져올 이벤트 개수를 지정한다. 일반적으로 1을 사용해서 하나씩 처리한다.
- Events:		이벤트 핸들을 저장할 배열(포인터)을 전달한다.
- Timeout:		이벤트를 기다릴 최대 시간(ms)이며 INFINITE 상수를 사용해 무한 대기할 수 있다.
- Flags:		예약된 값이라 항상 0으로 설정해야 한다.
- Returned:		실제로 가져온 이벤트 개수를 저장할 변수를 전달한다.

여기서 헷갈릴 수 있는데 EvtQuery에서 EvtQueryReverseDirection을 지정하고
EvtNext를 호출하면 최신 로그부터 과거 로그순으로 읽게 된다.

그러니까, 최신 로그가 발생할 때마다 순서대로 읽는 것이 아니라 최신 로그부터 과거 로그를 순서대로 읽게 된다는 뜻이다.
최신 로그만을 감지하고자 한다면 가장 마지막에 발생한 레코드 번호나 실제로 읽어온 로그의 개수가 0개인지 확인하고 대기 시키면 된다.

이벤트 데이터를 가져왔으니 이번엔 렌더링 해보자.

{
	BOOL EvtRender(
		EVT_HANDLE Context,      // 렌더링 컨텍스트 (NULL 가능)
		EVT_HANDLE Fragment,     // 이벤트 핸들
		DWORD Flags,             // 렌더링 옵션 (EVT_RENDER_FLAGS)
		DWORD BufferSize,        // 버퍼 크기 (바이트 단위)
		PVOID Buffer,            // 데이터를 저장할 버퍼
		PDWORD BufferUsed,       // 사용된 버퍼 크기
		PDWORD PropertyCount     // 속성 개수 (EvtRenderEventValues 사용 시)
	);
}

- Context:			렌더링 컨텍스트 핸들을 전달한다. EvtRenderEventXml이나 EvtRenderBookmark를 사용할 경우 NULL로 설정한다.
- Fragment:			이벤트 핸들을 전달한다. EvtNext()에서 가져온 개별 이벤트를 지정하면 된다.
- Flags:			렌더링 방식을 지정한다. Legacy 데이터 형식을 원하면 EvtRenderEventValues를 사용해야 한다.
- BufferSize:		데이터를 저장할 버퍼 크기를 전달한다(바이트 단위).
- Buffer:			렌더링된 데이터를 저장할 버퍼를 전달한다.
- BufferUsed:		실제로 사용된 버퍼 크기가 반환된다.
- PropertyCount:	EvtRenderEventValues를 사용할 경우 속성 개수를 저장하는 변수이다.

EvtRenderEventValues 플래그를 사용할 때는 컨텍스트를 반드시 지정해야 한다.
MSDN을 보면 xml 형식일 때에는 NULL로 지정하라고 쓰여 있는데 외에는 지정하라는 얘기가 없어서 꽤 헤맸다.
EvtCreateRenderContext함수로 조사할 컨텍스트를 지정하지 않으면 EvtRender 함수가 어떤 필드들을 가져올지 지정할 수가 없어서 제대로 된 값을 못 받는다.
이 점을 기억해두자. EvtCreateRenderContext는 장의 맨 마지막에 추가해뒀다.

EvtRender 모드가 EvtRenderEventValues일 때에는 지정한 목록 순서대로 조사된다.
즉, EvtCreateRenderContext로 전달한 Property 목록의 순서를 그대로 따른다.
예를 들어, 반환 받은 EVT_VARIANT 구조체 배열의 0번 항목에  ProviderName을 저장해두고 싶다면 EvtCreateRenderContext의 두 번째 인수로 Property의 목록을 전달할 때 'Event/System/Provider/@Name'을 목록의 제일 앞에 배치하면 된다.

Flags에는 다음과 같은 값을 지정할 수 있다.
- #define EvtRenderEventXml     0x0 : XML 형식으로 렌더링
- #define EvtRenderEventValues  0x1 : Legacy 데이터 형식으로 렌더링
- #define EvtRenderBookmark     0x2 : 이벤트 책갈피 렌더링

보다시피 옵션에 따라 인수의 의미가 변한다.
간단히 정리해보면 다음과 같다.

1. XML 형식 (EvtRenderEventXml)
- 컨텍스트(Context)는 NULL로 설정해야 한다.
- Buffer에 XML 문자열이 저장된다.
- 속성 개수(PropertyCount)는 의미가 없다.

2. Legacy 값 (EvtRenderEventValues)
- 컨텍스트(Context)는 NULL로 설정해야 한다.
- Buffer에는 이벤트 데이터를 담은 구조체 배열이 저장된다.
- 속성 개수(PropertyCount)가 구조체 배열의 항목 개수를 나타낸다.

3. 책갈피 (EvtRenderBookmark)
- 컨텍스트(Context)는 특정 책갈피 핸들을 가리켜야 한다.
- Buffer에는 책갈피 데이터를 담은 XML 문자열이 저장된다.
- 속성 개수(PropertyCount)는 의미가 없다.

맨 마지막 출력 인수 ProperyCount는 이벤트 로그에서 하나의 이벤트(또는 레코드)가 가지는 속성의 개수를 반환한다.
여러 속성이 있으며 일반적으로 다음과 같은 속성을 기본으로 가진다.
- 이벤트 ID:	이벤트의 고유 식별 번호
- 발생 시간:	이벤트가 기록된 시간
- 소스:			이벤트를 생성한 프로그램 또는 서비스
- 사용자:		이벤트를 발생시킨 사용자 계정
- 컴퓨터 이름:	이벤트가 발생한 시스템의 이름
- 메시지:		이벤트의 설명 또는 로그 내용

이 속성값이 EvtRenderEventValues 옵션으로 이벤트 집합을 조회했을 때 가져오는 값들이다.
구조체 배열 형태로 저장되며 버퍼에 접근하여 읽을 수 있다.

속성은 별도의 타입을 가지며 이러한 정보들이 하나의 구조체를 이루고 있는데 실제 데이터를 조립하는데 필요한 구조체를 알아보자.
원형은 다음과 같다.
{
	typedef struct _EVT_VARIANT {
		union {
			BOOL       BooleanVal;   // 부울 값 (TRUE/FALSE)
			INT8       SByteVal;     // 부호 있는 8비트 정수
			INT16      Int16Val;     // 부호 있는 16비트 정수
			INT32      Int32Val;     // 부호 있는 32비트 정수
			INT64      Int64Val;     // 부호 있는 64비트 정수
			UINT8      ByteVal;      // 부호 없는 8비트 정수
			UINT16     UInt16Val;    // 부호 없는 16비트 정수
			UINT32     UInt32Val;    // 부호 없는 32비트 정수 (예: EventID)
			UINT64     UInt64Val;    // 부호 없는 64비트 정수 (예: RecordId)
			float      SingleVal;    // 단일 정밀도 실수 (float)
			double     DoubleVal;    // 배정밀도 실수 (double)
			ULONGLONG  FileTimeVal;  // FILETIME 값 (예: TimeCreated)
			SYSTEMTIME *SysTimeVal;  // SYSTEMTIME 구조체 (예: TimeCreated)
			GUID       *GuidVal;     // GUID 값 (예: ProviderGuid)
			LPCWSTR    StringVal;    // 유니코드 문자열 (예: ProviderName, Message)
			LPCSTR     AnsiStringVal;// ANSI 문자열
			PBYTE      BinaryVal;    // 이진 데이터
			PSID       SidVal;       // 보안 식별자 (SID) 값 (예: UserId)
			size_t     SizeTVal;     // 포인터 크기 값
			EVT_HANDLE EvtHandleVal; // 이벤트 핸들 값
			LPCWSTR    XmlVal;       // XML 문자열 값
		};
		DWORD Count;  // 배열 요소 개수 (배열 타입일 경우)
		DWORD Type;   // 데이터 타입 (EvtVarTypeXXX 값)
	} EVT_VARIANT, *PEVT_VARIANT;
}

굉장히 많은 필드를 포함하는 유니온 공용체가 있다.
공용체의 특징은 따로 설명하지 않기로 하고 공용체를 제외한 나머지 멤버를 보자.

Type 멤버 변수가 특히 중요한데 if문과 같은 예외 처리 등의 분기를 위해 반드시 점검해봐야 한다.
EVT_VARIANT_TYPE이라는 열거형으로 정의되어 있으며 이 열거형과 비교하면 어떤 타입을 가지는지 알 수 있다.
열거형을 보고 간단한 예시를 만들어보자.

{
	typedef enum _EVT_VARIANT_TYPE {
		EvtVarTypeNull = 0,
		EvtVarTypeString = 1,
		EvtVarTypeAnsiString = 2,
		EvtVarTypeSByte = 3,
		EvtVarTypeByte = 4,
		EvtVarTypeInt16 = 5,
		EvtVarTypeUInt16 = 6,
		EvtVarTypeInt32 = 7,
		EvtVarTypeUInt32 = 8,
		EvtVarTypeInt64 = 9,
		EvtVarTypeUInt64 = 10,
		EvtVarTypeSingle = 11,
		EvtVarTypeDouble = 12,
		EvtVarTypeBoolean = 13,
		EvtVarTypeBinary = 14,
		EvtVarTypeGuid = 15,
		EvtVarTypeSizeT = 16,
		EvtVarTypeFileTime = 17,
		EvtVarTypeSysTime = 18,
		EvtVarTypeSid = 19,
		EvtVarTypeHexInt32 = 20,
		EvtVarTypeHexInt64 = 21,
		EvtVarTypeEvtHandle = 32,
		EvtVarTypeEvtXml = 35
	} EVT_VARIANT_TYPE;
}

타입의 유형을 값으로 표현해뒀기 때문에 비교하기 수월하다.
안그래도 복잡한 구조를 가진 시스템 요소를 타입까지 다 외우라고 하는건 너무한 일이다.
다음과 같이 간단히 타입을 체크할 수 있다.

{
	if(EvtVarTypeNull == pValues[EvtSystemEventID].Type){
		...
	}
}

다음은 Count 멤버 변수인데 이 멤버 변수는 잘 활용되지 않는다.
특별한 경우에만 활용되는데 EventData와 같이 추가 정보들이 포함된 때에만 사용된다고 볼 수 있다.
Guid나 EventData와 같이 여러 요소를 가지는 배열 타입이 전달되었을 때 전달된 요소의 개수가 저장된다.

이제 EvtRender를 호출하는 예시를 보자.
어떤 함수를 호출하고, 어떻게 호출하느냐에 따라 조사한 프로퍼티의 값에 접근하는 방법이 달라질 수 있다.
또, 첨자 번호를 지정하는 방법과 멤버 변수의 이름이 달라질 수도 있다.

{
	if (EvtRender(NULL, hEvent, EvtRenderEventValues, bufferUsed, buffer, &bufferUsed, &propertyCount)) {
		PEVT_VARIANT properties = (PEVT_VARIANT)buffer;
		printf("이벤트 ID: %u\n", properties[0].UInt32Val);			// EventID
		printf("발생 시간: %llu\n", properties[1].FileTimeVal);		// TimeCreated (FILETIME 형식)
		printf("소스: %ws\n", properties[2].StringVal);				// ProviderName
		printf("컴퓨터 이름: %ws\n", properties[3].StringVal);		// ComputerName
		printf("메시지: %ws\n", properties[4].StringVal);			// Message
	}
}

우선, 아래 표까지 쭉 읽어보자.

첨자			속성 이름			데이터 타입					설명
__________________________________________________________________________________________________________________________________________________
0				EventID				EvtVarTypeUInt				이벤트의 고유 식별 번호
1				TimeCreated			EvtVarTypeFileTime			이벤트가 기록된 시간(FILETIME 형식)
2				ProviderName		EvtVarTypeString			이벤트를 생성한 프로그램 또는 서비스 이름
3				ComputerName		EvtVarTypeString			이벤트가 발생한 시스템의 이름
4				Message				EvtVarTypeString			이벤트의 설명 또는 로그 내용
5				RecordId			EvtVarTypeUInt64			이벤트 로그에서의 고유 레코드 ID
6				Keywords			EvtVarTypeUInt64			이벤트의 키워드(분류) 정보
7				Level				EvtVarTypeUInt32			이벤트의 심각도 (예: 정보, 경고, 오류)
8				Opcode				EvtVarTypeUInt32			이벤트의 동작 코드(예: 시작, 중지)
9				Task				EvtVarTypeUInt32			이벤트의 작업 유형 (예: 특정 프로세스 실행)
10				ProviderGuid		EvtVarTypeGuid				이벤트를 생성한 프로그램 또는 서비스의 GUID(Globally Unique Identifier) 값
11				UserId				EvtVarTypeSid				이벤트를 발생시킨 사용자 계정의 SID 값
12				Channel				EvtVarTypeString			이벤트가 기록된 로그 채널 이름 (System, Security 등)
13				ProcessId			EvtVarTypeUInt32			이벤트를 생성한 프로세스 ID
14				ThreadId			EvtVarTypeUInt32			이벤트를 생성한 스레드 ID
15				ActivityId			EvtVarTypeGuid				이벤트와 관련된 활동 ID
16				RelatedActivity		EvtVarTypeGuid				관련된 이벤트의 활동 ID
17				ExecutionProcessId	EvtVarTypeUInt32			이벤트를 실행한 프로세스 ID
18				ExecutionThreadId	EvtVarTypeUInt32			이벤트를 실행한 스레드 ID
19				SecurityDescription	EvtVarTypeBinary			이벤트의 보안 정보
20				EventData			EvtVarTypeBinary			이벤트의 추가 데이터, 특정 이벤트 유형에 따라 다양한 정보를 포함
__________________________________________________________________________________________________________________________________________________

앞서, 어떤 옵션을 사용하느냐에 따라 프로퍼티의 첨자로 사용되는 값이 변한다고 했는데 크게 두 가지 경우로 나누어 볼 수 있다.

첫 번째는 EvtCreateRenderContext 함수의 세 번째 인수를 EvtRenderContextSystem으로 지정하는 경우이다.
EvtCreateRenderContext 함수는 이후에 설명하기로 하고 우선 아래 열거형 변수를 보자.
이 경우 아래 나와 있는 열거형의 멤버들을 직접 첨자로 활용할 수 있다.

{
	typedef enum _EVT_SYSTEM_PROPERTY_ID {
		EvtSystemProviderName = 0,
		EvtSystemProviderGuid,
		EvtSystemEventID,
		EvtSystemQualifiers,
		EvtSystemLevel,
		EvtSystemTask,
		EvtSystemOpcode,
		EvtSystemKeywords,
		EvtSystemTimeCreated,
		EvtSystemEventRecordId,
		EvtSystemActivityID,
		EvtSystemRelatedActivityID,
		EvtSystemProcessID,
		EvtSystemThreadID,
		EvtSystemChannel,
		EvtSystemComputer,
		EvtSystemUserID,
		EvtSystemVersion,
		EvtSystemPropertyIdEND
	} EVT_SYSTEM_PROPERTY_ID;
}

다음 예시를 보자.
{
	PEVT_VARIANT *pValues = NULL;
	EVT_HANDLE hContext = EvtCreateRenderContext(0, NULL, EvtRenderContextSystem);
	EvtRender(..., pValues, ...);
	
	wprintf("ProviderName: %ls\n", pValues[EvtSystemProviderName].StringVal);
}

앞서 말한대로 EvtCreateRenderContext 함수의 세 번째 인수를 EvtRenderContextSystem으로 설정하면 이미 정해져 있는 열거형의 멤버를 첨자로 활용할 수 있다. 

위 예시가 가장 일반적인데, 보통 시스템 로그를 조사할 때는 이런 식으로 전체를 조사하고 필요한 값만 적당히 골라내서 사용한다.

다음은 필터링을 사용하는 경우인데 EvtCreateRenderContext의 첫 번째 인수와 두 번째 인수에 조회할 프로퍼티의 목록을 wchar_t 타입의 문자열 배열로 구분하여 전달한다. 이 경우 대개 세 번째 인수는 EvtRenderContextValues로 지정한다.

사실 필터를 직접 지정하는 경우는 드문데, 보안과 관련된 특수한 데이터나 추가 데이터, 응용 프로그램이 기록하는 설명 등을 조회할 때가 이에 해당된다.

이때는 열거형 멤버를 첨자로 사용하는 것이 불가능하며 EvtCreateRenderContext의 두 번째 인수로 전달한 프로퍼티 목록의 순서를 그대로 따른다.

즉, 다음과 같다. 아래 예시를 보자.
{
	static const wchar_t *Props[] = {
		L"Event/System/TimeCreated/@SystemTime",
		L"Event/System/Channel",
		L"Event/System/Provider/@Name",
		L"Event/System/EventID",
		L"Event/System/Level",
		L"Event/System/Opcode",
		L"Event/System/Keywords",
		L"Event/System/Task",
		L"Event/System/Execution/@ProcessID",
		L"Event/EventData/Data[@Name='TargetUserName']",
		L"Event/EventData/Data[@Name='LogonType']"
	};
	static DWORD dwProps = sizeof(Props)/sizeof(Props[0]);

	PEVT_VARIANT *pValues = NULL;
	EVT_HANDLE hContext = EvtCreateRenderContext(dwProps, Props, EvtRenderContextSystem);
	EvtRender(..., pValues, ...);
	
	wprintf("ProviderName: %ls\n", pValues[2].StringVal);
}

프로퍼티의 목록을 직접 작성하여 EvtCreateRenderContext 함수의 두 번째 인수에 전달했다.
이때는 앞선 예제와 달리 첨자 번호를 직접 프로퍼티의 목록에 맞게 지정해야 한다.
이 두 가지 경우를 반드시 기억해두자. 초보자들이 가장 어려워 하는 부분이기도 하다.

또, EVT_VARIANT의 구조체로부터 값을 읽거나 쓸 때 내부 공용체 멤버 변수 중 어떤 변수로 접근하여야 하는지 고민할 수도 있다.

결론만 말하자면 뭘 읽든 다 똑같다.
이건 공용체에 대해 잘 이해하지 못하고 있는 사람일 가능성이 크다.
꽤 오랜 시간 프로그래밍을 해도 잘 모르는 경우가 있는데 다시 공용체에 대해 분석해보기 바란다.

추가로, 간혹 시스템 로그를 임의로 발생시켜야 하는 경우가 생길 수 있다.
테스트용으로도 쓰이니까 다음 함수도 알아두자.

{
	HANDLE hEventLog = RegisterEventSource(NULL, L"CustomSource");
	ReportEvent(hEventLog, EVENTLOG_INFORMATION_TYPE, 0, 1001, NULL, 1, 0, L"테스트 이벤트 발생!", NULL);
	DeregisterEventSource(hEventLog);
}

{
	HANDLE RegisterEventSourceW(
		LPCWSTR lpUNCServerName,   // 서버 이름 (로컬 시스템이면 NULL)
		LPCWSTR lpSourceName       // 이벤트 소스 이름 (애플리케이션 이름 등)
	);
}

RegisterEventSource는 이름 그대로 이벤트를 등록하는 것이다.
성공하면 이벤트 소스 핸들을 반환하며 이 핸들은 ReportEvent()에서 사용된다.
실패시 NULL을 반환하는데 GetLastError()를 호출해 오류 코드를 확인할 수 있다.

두 번째 인수로 이름을 전달하는데 실행한 프로그램의 이름을 전달하면 된다.
같은 이름으로 여러번 등록된 경우 기존 소스를 다시 가져오며 이벤트 로그 뷰어에서 "소스" 항목으로 표시된다.

만약 특정 원격 서버에서 이벤트를 등록하고자 한다면 해당 서버의 UNC 경로를 입력해야 한다.

다음은 ReportEvent 함수를 보자.
{
	BOOL ReportEventW(
		HANDLE hEventLog,         // 이벤트 소스 핸들(RegisterEventSource() 로 얻은 핸들)
		WORD wType,               // 이벤트 유형 (정보: evENTLOG_INFORMATION_TYPE, 경고: EVENTLOG_WARNING_TYPE, 오류: EVENTLOG_ERROR_TYPE 등)
		WORD wCategory,           // 이벤트 카테고리 (기본값 0)
		DWORD dwEventID,          // 사용자가 정의한 이벤트 ID
		PSID lpUserSid,           // 이벤트를 발생시킨 사용자 SID (NULL 가능)
		WORD wNumStrings,         // 이벤트 메시지에 포함할 문자열 개수
		DWORD dwDataSize,         // 추가적인 이진 데이터 크기 (0이면 없음)
		LPCWSTR *lpStrings,       // 이벤트 메시지 문자열 배열
		LPVOID lpRawData          // 추가적인 이진 데이터 (NULL 가능)
	);
}

ReportEvent 함수는 이벤트 로그에 새로운 이벤트를 기록하는 역할을 한다.
이벤트가 로그에 정상적으로 기록되면 TRUE를 반환하는데 이미 사용 예시를 보인 적 있고 cmd에서도 많이 봤을 것이다.

다음은 해제 함수인데 별거 없다.
{
	1. DeregisterEventSource(hEventLog);
	2. EvtClose(hQuery);
}

이벤트 로그를 등록한 후에는 핸들을 해제해야 하며 등록된 이벤트 소스를 정리하고 리소스를 반환하는 역할을 한다.
EvtClose는 모든 이벤트 로그 핸들을 닫는 역할을 하며 EvtQuery, EvtNext, EvtOpenLog 등의 함수에서 얻은 핸들을 닫는 용도로 쓰인다.

위에서 배운 함수들을 이용해서 전체적인 흐름을 얼추 그려보면 다음과 같은 순서로 진행된다.

1. EvtQuery()를 사용해서 "System" 로그 채널에서 이벤트 데이터를 가져옴.
2. EvtNext()를 호출해서 최신 이벤트를 하나씩 가져옴.
3. EvtRender()를 이용해 속성을 EVT_VARIANT 구조체 배열 형태로 변환.
4. EventID, TimeCreated, ProviderName, ComputerName, Message 속성을 출력함.
5. 메모리 해제 및 핸들 정리 (EvtClose(hEvent), EvtClose(hQuery)).

===============================================================================================================

다음은 이벤트별로 어떤 의미를 가지는지 사람이 알아듣기 쉬운 텍스트로 변경해주는 포맷팅 함수를 알아보자.
{
	BOOL EvtFormatMessage(
		[in]  EVT_HANDLE   PublisherMetadata,		// EvtOpenPublisherMetadata 함수가 반환하는 핸들을 전달한다. NULL로 지정할 수 있지만 일반적이지 않으며 이벤트 제공자의 메타데이터로부터 이벤트 제공자가 정의한 메시지 템플릿을 읽어온다. 즉, 제공자가 정의한 메시지를 받아오기 위해 필요한 핸들이다.
		[in]  EVT_HANDLE   Event,					// 이벤트에 대한 핸들이다. Flags 매개 변수가 EvtFormatMessageId로 지정된 경우 이 매개변수는 NULL이어야 하며 이벤트의 메시지를 얻어올 대상 핸들을 전달한다.
		[in]  DWORD        MessageId,				// 리소스 식별자이며 GetPublisherMetadataProperty 함수를 사용하는 것이 아니면 대개 0으로 둔다. Flags 매개 변수가 EvtFormatMessageId로 되어 있는 경우에만 0이 아닌 다른 값으로 설정한다.
		[in]  DWORD        ValueCount,				// Values 매개 변수의 개수를 전달한다.
		[in]  PEVT_VARIANT Values,					// 변환할 데이터를 전달한다. 이 값은 NULL일 수 있는데 이때는 이벤트 데이터 자체에서 값을 가져온다. 이 매개 변수를 사용해 등록된 값을 재정의(수정)할 수 있다.
		[in]  DWORD        Flags,					// 가져올 데이터 형식을 지정한다.
		[in]  DWORD        BufferSize,				// 버퍼 크기를 전달한다.
		[in]  LPWSTR       Buffer,					// 변환된 메시지를 받을 버퍼를 전달한다. NULL로 지정하면 필요한 크기를 반환한다.
		[out] PDWORD       BufferUsed				// 실제 기록한 데이터의 크기 또는 필요한 버퍼의 크기가 반환된다.
	);
}

함수가 성공하면 TRUE를 리턴한다.
여섯 번째 인수 Flags에 적절한 옵션을 추가하면 네 번째 인수 ValueCount와 다섯 번째 인수 Values를 각각 0과 NULL로 설정해도 이벤트 데이터에서 알아서 값을 잘 가져온다. 

즉, 4,5번 인수를 0과 NULL로 전달하고 Flags에 가져오고자 하는 데이터 형식만 이쁘게 지정하면 이벤트 데이터에서 필요한 메시지를 알아서 잘 받아온다.

MessageId는 특수한 경우 0이 아닌 값을 가지는데 공급자가 특수한 포맷으로 메타데이터를 기록한 경우가 이에 해당되는 것으로 보인다. 

Flags는 가져오고자 하는 메시지의 유형을 지정하는데 이 메시지의 유형은 열거형으로 되어 있으며 다음과 같다.

typedef enum _EVT_FORMAT_MESSAGE_FLAGS {
	EvtFormatMessageEvent = 1,
	EvtFormatMessageLevel,
	EvtFormatMessageTask,
	EvtFormatMessageOpcode,
	EvtFormatMessageKeyword,
	EvtFormatMessageChannel,
	EvtFormatMessageProvider,
	EvtFormatMessageId,
	EvtFormatMessageXml
} EVT_FORMAT_MESSAGE_FLAGS;

이름 자체가 굉장히 설명적이지만 그래도 정리해봤다.
EvtFormatMessageEvent:		EventID로부터 미리 정의된 문자열 상수를 가져온다.
EvtFormatMessageLevel:		Level이 가지는 값으로부터 미리 정의된 문자열 상수를 가져온다.
EvtFormatMessageTask:		Task이 가지는 값으로부터 미리 정의된 문자열 상수를 가져온다.
EvtFormatMessageOpcode:		Opcode가 가지는 값으로부터 미리 정의된 문자열 상수를 가져온다.
EvtFormatMessageKeyword:	Keyword가 가지는 값으로부터 미리 정의된 문자열 상수를 가져온다. 여러 키워드가 지정된 경우 null로 끝나는 문자열로 구분지어 전달된다.
EvtFormatMessageChannel:	Channel이 가지는 값으로부터 미리 정의된 문자열 상수를 가져온다.
EvtFormatMessageProvider:	Provider가 가지는 값으로부터 미리 정의된 문자열 상수를 가져온다.
EvtFormatMessageId:			MessageId가 가지는 값으로부터 프로그램이 기록한 메시지를 가져온다. 공급자의 메타데이터에는 리소스 식별자가 포함된다.
EvtFormatMessageXml:		Xml데이터를 가져온다. 세부 정보는 RenderingInfo 섹션에 포함된다.

주석에 써놨지만 첫 번째 인수로 반드시 공급자의 메타데이터 핸들을 전달하는 것이 좋다.
이 핸들을 가져올 때는 다음 함수를 사용한다.

EVT_HANDLE EvtOpenPublisherMetadata(
	[in, optional] EVT_HANDLE Session,			// 원격 컴퓨터가 있을 때만 사용된다. EvtOpenSession 함수가 반환하는 원격 세션 핸들이며 원격지에서 공급자에 대한 메타데어티를 가져오기 위해 필요하다. 로컬에서 가져오려면 NULL로 지정한다.
	[in]           LPCWSTR    PublisherId,		// 공급자의 이름을 지정한다. 공급자의 이름을 열거하려면 EvtOpenPublisherName 함수를 호출하면 된다.
	[in, optional] LPCWSTR    LogFilePath,		// 공급자가 기록한 로그 파일의 전체 경로를 전달한다. 로그 파일에는 공급자의 메타데이터가 포함되며 로컬 컴퓨터에 등록되지 않은 공급자가 있을 경우 이 매개 변수가 사용된다. 이미 등록되어 있는 공급자에서 메타데이터를 읽을 때는 NULL로 설정한다.
	[in]           LCID       Locale,			// 공급자에서 지역화된 메타데이터에 액세스할 때 사용할 로캘 식별자이다. 식별자를 만드려면 MAKELCID 매크로를 사용하는데 일반적으로 0으로 지정한다. 호출 스레드가 속한 시스템의 로캘 식별자를 사용할 때 0을 사용한다.
	[in]           DWORD      Flags				// 예약된 값이므로 항상 0이다.
);

함수가 성공하면 메타데이터에 대한 핸들을 반환하고 실패시 NULL을 반환한다.

메타데이터란 특정 이벤트 공급자에 대한 정보를 포함하는 데이터이다.
예를 들어, 프로그램을 만들고 리소스 따위로 프로그램을 제작한 일자, 파일 이름, 만든 사람 등의 데이터를 집어넣는데 이러한 데이터들을 메타데이터라고 한다.

공급자(또는 개발자)가 정의하는 프로그램을 설명하고 보충하는 모든 데이터를 메타데이터라고 이해하는 것이 더 적합할 것이다.
이 함수가 설명하는 메타데이터는 아마 공급자가 정의한 이벤트, 속성, 지역화된 메시지 등의 정보 따위를 포함할 것이다. 어떻게 보면 데이터를 설명하는 데이터라고도 할 수 있다.


이제 EvtCreateRenderContext 함수에 대해 알아보자.

이 함수는 이벤트 로그에서 어떤 필드(프로퍼티)들을 가져올지 렌더링 컨텍스트를 지정하는 함수다.
이름 그대로 렌더링할 컨텍스트를 지정하는 것이므로 EvtRender 함수를 사용하기 이전에 호출한다.

이 컨텍스트 핸들을 EvtRender 함수의 첫 번째 인수로 넘기면 전체를 조사하지 않고 지정한 컨텍스트 내의 프로퍼티만 조사할 수 있다.

EVT_HANDLE WINAPI EvtCreateRenderContext(
	DWORD     propertyCount,    // 가져올 필드(프로퍼티) 개수, 0으로 지정할 수 있으며 기본 값을 사용한다.
	LPCWSTR*  pwsPropertyNames, // 필드 이름 배열을 지정한다. 이 인수가 NULL로 지정되면 전체를 조사하며 EVT_SYSTEM_PROPERTY_ID 열거형의 값을 배열의 인덱스로 사용할 수 있다.
	DWORD     flags             // 옵션 (일반적으로 0: EvtRenderContextValues)
);

- propertyCount: 필드 이름 개수
- pwsPropertyNames: 필드 이름 배열 (wide string 배열)
- flags: 보통 0

첫 번째 인수와 두 번째 인수가 각각 0과 NULL로 전달되면 전체를 조사한다.
이렇게 조사하게 되면 주석에 설명해뒀듯이 열거형 값을 첨자로 사용할 수 있게 된다.

플래그에 지정할 수 있는 값은 다음과 같은 열거형 타입으로 되어 있다.

typedef enum _EVT_RENDER_CONTEXT_FLAGS {
	EvtRenderContextValues = 0,
	EvtRenderContextSystem,
	EvtRenderContextUser
} EVT_RENDER_CONTEXT_FLAGS;

앞에서 주의사항은 이미 다 얘기했으며 딱히 어려울 것 없는 함수라 더 설명할 것이 없다.

이제 진짜 마지막으로 실시간으로 로그를 감지하는 유형의 프로그램을 만들 때 필요한 함수를 알아보자.
구독이라는 개념을 사용하는데 정확한 의미는 사실 실시간 알림을 받는다는 정도로 해석하면 될 것 같다.

EVT_HANDLE EvtSubscribe(
	EVT_HANDLE Session,             // 원격 이벤트 세션 핸들, 로컬이면 NULL
	HANDLE SignalEvent,             // 신호 객체의 핸들, 이벤트 발생 시 신호 상태로 만들어주는데 Callback 함수를 사용할 때는 항상 NULL이어야 한다.
	LPCWSTR ChannelPath,            // 구독할 이벤트 로그 채널명 (예: "System", "Application", "Security")
	LPCWSTR Query,					// XPath 쿼리: 이벤트 필터링용, NULL 시 모든 이벤트 구독
	EVT_HANDLE Bookmark,            // 책갈피 핸들: 특정 이벤트 위치부터 구독 시작, NULL은 최신 이벤트부터 시작
	PVOID Context,                  // 콜백 함수에 전달할 사용자 정의 데이터 포인터, 필요 없으면 NULL
	EVT_SUBSCRIBE_CALLBACK Callback,// 새 이벤트 발생 시 호출할 콜백 함수 포인터
	DWORD Flags                     // 구독 플래그: 동작 모드 지정 (아래 참고)
);

주요 특징을 정리해보면 다음과 같다.
- 실시간으로 이벤트가 생성될 때마다 알림을 받을 수 있다.
- XPath 쿼리를 이용해 특정 이벤트만 필터링하여 구독 가능하다다.
- 구독 시작 위치를 지정할 수 있다. 예를 들어 최신 이벤트부터 구독하거나 특정 책갈피(Bookmark) 이후부터 구독할 수 있다.
- 이벤트가 발생하면 지정한 콜백 함수가 호출된다. 즉각적인 반응이 가능하다.

주로 시스템 모니터링, 보안 감사, 로그 기반 알림 시스템 등에 활용된다.

각각의 인수를 다시 정리해보면 다음과 같다.
- Session: 원격 컴퓨터의 이벤트 로그 세션 핸들이다. NULL이면 현재 로컬 컴퓨터 이벤트 로그를 구독한다.
- SignalEvent: 이벤트가 발생했을 때 신호를 보내기 위한 신호 객체에 대한 핸들이다. 비동기 처리나 외부 이벤트와 연동할 때 사용되며 Callback 프로시저를 사용할 경우 항상 NULL이어야 한다. Callback을 사용할 때는 HWINEVENTHOOK 타입을 전달하는데 시스템 후킹에 활용되는 것으로 보인다.
- ChannelPath: 구독할 이벤트 로그 채널 이름을 지정한다. 예를 들어, "Application", "System", "Security" 등을 지정할 수 있다. 특정 채널 이벤트만 구독하는 것도 가능하다.
- Query: XPath 쿼리 문자열로, 구독할 이벤트를 필터링한다.
	-예: "*[System[(EventID=4624)]]"
	-NULL일 경우, 지정 채널의 모든 이벤트를 구독.
- Bookmark: 이벤트 로그에서 구독을 시작할 위치를 저장하는 핸들이다. 이벤트 위치를 기억해 중단된 곳부터 다시 시작할 수 있으며 NULL이면 Flags에 따라 최신 이벤트부터 구독하거나 처음부터 구독한다.
- Context: 콜백 함수에 전달할 사용자 정의 데이터이다. 콜백 함수에서 필요 시 사용할 수 있다. 주로 정형화된 텍스트 형식을 사용하기 위해 자주 사용된다.
- Callback: 이벤트가 발생할 때마다 반응할 콜백 함수를 지정한다. EVT_SUBSCRIBE_NOTIFY_ACTION 열거형 값에 따라 처리 동작이 결정된다.
- Flags 구독 모드를 지정하는 플래그이다.


마지막 인수인 Flags에 지정할 수 있는 값은 다음과 같다.
- EvtSubscribeToFutureEvents : 호출 시점 이후 새로 생성되는 이벤트만 구독
- EvtSubscribeStartAtOldestRecord : 가장 오래된 이벤트부터 구독
- EvtSubscribeStartAfterBookmark : 책갈피 이후 이벤트부터 구독
- EvtSubscribeStrict : 엄격한 필터링 및 스키마 검증

Callback 함수에서 EVT_SUBSCRIBE_NOTIFY_ACTION 열거형에 따라 처리 동작이 결정된다고 했다.
주요 멤버와 의미를 살펴보자.

- EvtSubscribeActionError:				구독 중 오류가 발생했을 때 호출된다. 예로, 네트워크 오류, 권한 문제 등이 있다.
- EvtSubscribeActionDeliver:			새로운 이벤트가 도착했을 때 호출된다. 이때 이벤트 핸들을 받아 이벤트를 처리한다.
- EvtSubscribeActionCanceled:			구독이 취소되었을 때 호출된다. 예로, 사용자가 구독을 종료하거나, 애플리케이션이 종료될 때가 해당된다.
- EvtSubscribeActionSubscribed:			구독이 성공적으로 시작되었을 때 호출된다. 초기화가 완료되었을 때 발생한다.
- EvtSubscribeActionEnabled:			이벤트 로그 채널이 활성화되었을 때 호출된다. 주로 고급 로그 모니터링 상황에서만 사용된다.
- EvtSubscribeActionDisabled:			이벤트 로그 채널이 비활성화되었을 때 호출된다. 채널이 꺼지거나 로그 비활성화 시 발생한다.
- EvtSubscribeActionRemoved:			이벤트 로그 채널이 삭제되었을 때 호출된다. 채널 자체가 시스템에서 제거된 경우가 이에 해당된다.
- EvtSubscribeActionSessionConnected:	원격 이벤트 로그 세션이 연결되었을 때 호출된다. 원격 로그를 수집할 때 활용되며 세션에 연결됐을 때 발생한다.
- EvtSubscribeActionSessionDisconnected:원격 이벤트 로그 세션이 연결 해제되었을 때 호출된다.

Callback 함수의 원형은 다음과 같다.

DWORD WINAPI SubscriptionCallback(
	EVT_SUBSCRIBE_NOTIFY_ACTION Action,
	PVOID UserContext,
	EVT_HANDLE Event
)

각 인수는 다음과 같은 의미를 가진다.
- Action: 
	- EvtSubscribeActionDeliver :	새 이벤트가 도착했을 때 호출된다.
	- EvtSubscribeActionError :		구독 중 오류가 발생했을 때 호출된다.
	- EvtSubscribeActionCanceled :	구독이 취소되었을 때 호출된다.
	이 외에도 기타 상황을 알리는 값들이 더 있다.
- UserContext: 사용자 정의 인수로 NULL 값이 전달될 수 있다. 일반적으로 EvtSubscribe 함수 호출 시 컨텍스트 포인터를 전달한다.
- Event: 새 이벤트가 도착한 경우에는 이벤트를 가리키는 핸들이 전달된다. 오류나 구독 취소 시에는 NULL일 수 있다.

사실상 이 함수는 콜백 함수를 이용하는 방법이 가장 보편적이다.
두 번째 인수로 신호 객체의 핸들을 전달해서 직접 조사하는 방법도 있는데 EvtNext가 함께 사용된다.

콜백이 없으면 이벤트 도착, 오류 발생, 구독 취소 등의 정확한 동작을 파악할 수 없다.
단순히 감지용으로 쓸 거라면 콜백을 사용하지 않아도 되지만 웬만하면 쓰는게 좋다.

상황을 명확히 구분하고 오류 처리가 섬세해야 하는 고급 시나리오에서는 콜백 방식이 항상 더 유리하다.

